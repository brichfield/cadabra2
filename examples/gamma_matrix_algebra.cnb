
{
	"cells" : 
	[
		
		{
			"cell_origin" : "client",
			"cell_type" : "latex",
			"cells" : 
			[
				
				{
					"cell_origin" : "client",
					"cell_type" : "latex_view",
					"source" : "\\section*{Gamma matrix algebra (Clifford algebras)}\n\nCadabra can do gamma matrix algebra in an arbitrary number of dimensions. The example below shows how to work out \nthe particular gamma matrix contraction\n\\begin{equation*}\n\\Gamma_{s r} \\Gamma_{r l} \\Gamma_{k m} \\Gamma_{m s}\\,,\n\\end{equation*}\nwhich is not impossible to do by hand, but certainly much nicer with Cadabra. As always, we first need to declare\nthe symbols we are going to use. "
				}
			],
			"hidden" : true,
			"source" : "\\section*{Gamma matrix algebra (Clifford algebras)}\n\nCadabra can do gamma matrix algebra in an arbitrary number of dimensions. The example below shows how to work out \nthe particular gamma matrix contraction\n\\begin{equation*}\n\\Gamma_{s r} \\Gamma_{r l} \\Gamma_{k m} \\Gamma_{m s}\\,,\n\\end{equation*}\nwhich is not impossible to do by hand, but certainly much nicer with Cadabra. As always, we first need to declare\nthe symbols we are going to use. "
		},
		
		{
			"cell_origin" : "client",
			"cell_type" : "input",
			"cells" : 
			[
				
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"source" : "\\begin{dmath*}{}\\text{Attached property Indices(position=free) to~}{s, r, l, k, m, n}.\\end{dmath*}"
				},
				
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"source" : "\\begin{dmath*}{}\\text{Attached property Integer to~}{s, r, l, k, m, n}.\\end{dmath*}"
				},
				
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"source" : "\\begin{dmath*}{}\\text{Attached property GammaMatrix to~}{\\Gamma}_{\\#}.\\end{dmath*}"
				},
				
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"source" : "\\begin{dmath*}{}\\text{Attached property KroneckerDelta to~}{\\delta}_{mn}.\\end{dmath*}"
				}
			],
			"source" : "{s,r,l,k,m,n}::Indices(vector);\n{s,r,l,k,m,n}::Integer(0..d-1);\n\\Gamma_{#}::GammaMatrix(metric=\\delta);\n\\delta_{m n}::KroneckerDelta;"
		},
		
		{
			"cell_origin" : "client",
			"cell_type" : "latex",
			"cells" : 
			[
				
				{
					"cell_origin" : "client",
					"cell_type" : "latex_view",
					"source" : "After every step in which we work out the product of two generalised gamma matrices, we need a number of algorithms\nto simplify the result. We will use the mechanism of defining a \\verb|post_process| function, which gets called after\nevery Cadabra function call. Note how every algorithm that is called in here acts on the same expression; you do not have to \ndo things like \\verb|ex = sort_product(ex)|."
				}
			],
			"hidden" : true,
			"source" : "After every step in which we work out the product of two generalised gamma matrices, we need a number of algorithms\nto simplify the result. We will use the mechanism of defining a \\verb|post_process| function, which gets called after\nevery Cadabra function call. Note how every algorithm that is called in here acts on the same expression; you do not have to \ndo things like \\verb|ex = sort_product(ex)|."
		},
		
		{
			"cell_origin" : "client",
			"cell_type" : "input",
			"source" : "def post_process(ex):\n\tsort_product(ex)\n\teliminate_kronecker(ex)\n\tcanonicalise(ex)\n\tcollect_terms(ex)"
		},
		
		{
			"cell_origin" : "client",
			"cell_type" : "latex",
			"cells" : 
			[
				
				{
					"cell_origin" : "client",
					"cell_type" : "latex_view",
					"source" : "The expression which we want to simplify reads"
				}
			],
			"hidden" : true,
			"source" : "The expression which we want to simplify reads"
		},
		
		{
			"cell_origin" : "client",
			"cell_type" : "input",
			"cells" : 
			[
				
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"source" : "\\begin{dmath*}{}-\\Gamma_{m r} \\Gamma_{l m} \\Gamma_{k s} \\Gamma_{r s}\\end{dmath*}"
				}
			],
			"source" : "ex:=\\Gamma_{s r} \\Gamma_{r l} \\Gamma_{k m} \\Gamma_{m s};"
		},
		
		{
			"cell_origin" : "client",
			"cell_type" : "input",
			"cells" : 
			[
				
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"source" : "\\begin{dmath*}{}-\\left(2\\Gamma_{l r}-\\Gamma_{l r} d+\\delta_{l r} d-\\delta_{l r}\\right) \\Gamma_{k s} \\Gamma_{r s}\\end{dmath*}"
				}
			],
			"source" : "join_gamma(ex);"
		},
		
		{
			"cell_origin" : "client",
			"cell_type" : "input",
			"cells" : 
			[
				
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"source" : "\\begin{dmath*}{}-2\\Gamma_{l r} \\Gamma_{k s} \\Gamma_{r s}+\\Gamma_{l r} d \\Gamma_{k s} \\Gamma_{r s}+\\Gamma_{k r} \\Gamma_{r s} \\delta_{l s} d+\\Gamma_{k s} \\Gamma_{l s}\\end{dmath*}"
				}
			],
			"source" : "distribute(ex);"
		},
		
		{
			"cell_origin" : "client",
			"cell_type" : "input",
			"cells" : 
			[
				
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"source" : "\\begin{dmath*}{}-2\\left(\\Gamma_{k l r s}+\\Gamma_{l s} \\delta_{k r}+\\Gamma_{k l} \\delta_{r s}-\\Gamma_{r s} \\delta_{k l}-\\Gamma_{k r} \\delta_{l s}+\\delta_{k r} \\delta_{l s}-\\delta_{k l} \\delta_{r s}\\right) \\Gamma_{r s}+\\Gamma_{l r} \\left(2\\Gamma_{k r}-\\Gamma_{k r} d+\\delta_{k r}-\\delta_{k r} d\\right) d+\\left(\\Gamma_{k l} d-2\\Gamma_{k l}+\\delta_{k l} d-\\delta_{k l}\\right) d+2\\Gamma_{k l}-\\Gamma_{k l} d+\\delta_{k l}-\\delta_{k l} d\\end{dmath*}"
				}
			],
			"source" : "join_gamma(ex);"
		},
		
		{
			"cell_origin" : "client",
			"cell_type" : "input",
			"cells" : 
			[
				
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"source" : "\\begin{dmath*}{}-2\\Gamma_{k l r s} \\Gamma_{r s}+2\\Gamma_{l r} \\delta_{k s} \\Gamma_{r s}+2\\Gamma_{r s} \\delta_{k l} \\Gamma_{r s}+2\\Gamma_{k r} \\delta_{l s} \\Gamma_{r s}-2\\Gamma_{r s} \\delta_{k r} \\delta_{l s}+2\\Gamma_{l r} \\Gamma_{k r} d-\\Gamma_{l r} \\Gamma_{k r} d d-4\\Gamma_{k l} d-\\Gamma_{l r} \\delta_{k r} d d+\\Gamma_{k l} d d+\\delta_{k l} d d-2\\delta_{k l} d+2\\Gamma_{k l}+\\delta_{k l}\\end{dmath*}"
				}
			],
			"source" : "distribute(ex);"
		},
		
		{
			"cell_origin" : "client",
			"cell_type" : "input",
			"cells" : 
			[
				
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"source" : "\\begin{dmath*}{}-14\\Gamma_{k l} d+4\\Gamma_{k l} d d+12\\Gamma_{k l}-2\\Gamma_{l r} \\Gamma_{k r}+2\\Gamma_{r s} \\Gamma_{r s} \\delta_{k l}-2\\Gamma_{k r} \\Gamma_{l r}+2\\left(-2\\Gamma_{k l}+\\Gamma_{k l} d+\\delta_{k l}-\\delta_{k l} d\\right) d-\\left(-2\\Gamma_{k l}+\\Gamma_{k l} d+\\delta_{k l}-\\delta_{k l} d\\right) d d+\\delta_{k l} d d-2\\delta_{k l} d+\\delta_{k l}\\end{dmath*}"
				}
			],
			"source" : "join_gamma(ex);"
		},
		
		{
			"cell_origin" : "client",
			"cell_type" : "input",
			"cells" : 
			[
				
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"source" : "\\begin{dmath*}{}-18\\Gamma_{k l} d+8\\Gamma_{k l} d d+12\\Gamma_{k l}-2\\Gamma_{l r} \\Gamma_{k r}+2\\Gamma_{r s} \\Gamma_{r s} \\delta_{k l}-2\\Gamma_{k r} \\Gamma_{l r}-2\\delta_{k l} d d-\\Gamma_{k l} d d d+\\delta_{k l} d d d+\\delta_{k l}\\end{dmath*}"
				}
			],
			"source" : "distribute(ex);"
		},
		
		{
			"cell_origin" : "client",
			"cell_type" : "input",
			"cells" : 
			[
				
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"source" : "\\begin{dmath*}{}-18\\Gamma_{k l} d+8\\Gamma_{k l} d^{2}+12\\Gamma_{k l}-2\\Gamma_{l r} \\Gamma_{k r}+2\\Gamma_{r s} \\Gamma_{r s} \\delta_{k l}-2\\Gamma_{k r} \\Gamma_{l r}-2\\delta_{k l} d^{2}-\\Gamma_{k l} d^{3}+\\delta_{k l} d^{3}+\\delta_{k l}\\end{dmath*}"
				}
			],
			"source" : "collect_factors(ex);"
		},
		
		{
			"cell_origin" : "client",
			"cell_type" : "input",
			"source" : ""
		}
	],
	"description" : "Cadabra JSON notebook format",
	"version" : 1.0
}

