
{
	"cells" : 
	[
		
		{
			"cell_origin" : "client",
			"cell_type" : "latex",
			"cells" : 
			[
				
				{
					"cell_origin" : "client",
					"cell_type" : "latex_view",
					"source" : "\\algorithm{vary}{Generic variation algorithm for functional derivatives.}\n\nGeneric variation command.  Takes a rule or a set of rules\naccording to which the terms in a sum should be varied. In every term,\napply the rule once to every factor."
				}
			],
			"hidden" : true,
			"source" : "\\algorithm{vary}{Generic variation algorithm for functional derivatives.}\n\nGeneric variation command.  Takes a rule or a set of rules\naccording to which the terms in a sum should be varied. In every term,\napply the rule once to every factor."
		},
		
		{
			"cell_origin" : "client",
			"cell_type" : "input",
			"cells" : 
			[
				
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"source" : "\\begin{dmath*}{}A B+A C\\end{dmath*}"
				},
				
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"source" : "\\begin{dmath*}{}\\epsilon D B+A \\epsilon C+\\epsilon D C+A \\left(\\epsilon A-\\epsilon B\\right)\\end{dmath*}"
				}
			],
			"source" : "ex:= A B + A C;\n\nvary(_, $A -> \\epsilon D, B -> \\epsilon C, C -> \\epsilon A - \\epsilon B$ );"
		},
		
		{
			"cell_origin" : "client",
			"cell_type" : "latex",
			"cells" : 
			[
				
				{
					"cell_origin" : "client",
					"cell_type" : "latex_view",
					"source" : "It also works when acting on powers, in which case it will use the\nproduct rule to expand them."
				}
			],
			"hidden" : true,
			"source" : "It also works when acting on powers, in which case it will use the\nproduct rule to expand them."
		},
		
		{
			"cell_origin" : "client",
			"cell_type" : "input",
			"cells" : 
			[
				
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"source" : "\\begin{dmath*}{}A^{3}\\end{dmath*}"
				},
				
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"source" : "\\begin{dmath*}{}3A^{2} \\delta(A)\\end{dmath*}"
				}
			],
			"source" : "ex:= A**3;\nvary(_, $A -> \\delta{A}$);"
		},
		
		{
			"cell_origin" : "client",
			"cell_type" : "latex",
			"cells" : 
			[
				
				{
					"cell_origin" : "client",
					"cell_type" : "latex_view",
					"source" : "This algorithm is thus mostly intended for variational derivatives."
				}
			],
			"hidden" : true,
			"source" : "This algorithm is thus mostly intended for variational derivatives."
		},
		
		{
			"cell_origin" : "client",
			"cell_type" : "input",
			"cells" : 
			[
				
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"source" : "\\begin{dmath*}{}\\text{Attached property PartialDerivative to~}\\partial(\\#).\\end{dmath*}"
				},
				
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"source" : "\\begin{dmath*}{}\\int{}\\partial_{\\mu}(\\phi) \\partial^{\\mu}(\\phi)\\, {\\rm d}x\\end{dmath*}"
				}
			],
			"source" : "\\partial{#}::PartialDerivative;\nex:= \\int{\\partial_{\\mu}{\\phi} \\partial^{\\mu}{\\phi}}{x};"
		},
		
		{
			"cell_origin" : "client",
			"cell_type" : "input",
			"cells" : 
			[
				
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"source" : "\\begin{dmath*}{}\\int{}\\partial_{\\mu}(\\delta(\\phi)) \\partial^{\\mu}(\\phi)+\\partial_{\\mu}(\\phi) \\partial^{\\mu}(\\delta(\\phi))\\, {\\rm d}x\\end{dmath*}"
				}
			],
			"source" : "vary(ex, $\\phi -> \\delta{\\phi}$);"
		},
		
		{
			"cell_origin" : "client",
			"cell_type" : "input",
			"source" : "integrate_by_parts(ex, $\\delta{\\phi}$);\n\n"
		}
	],
	"description" : "Cadabra JSON notebook format",
	"version" : 1.0
}

