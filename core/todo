#include <string>
#include <boost/python.hpp>

/// @brief Mockup type.
class Spam
{
public:
  explicit Spam(std::string str)
    : str_(str)
  {}

  void action()
  {
    std::cout << "Spam::action(): " << str_ << std::endl;
  }

private:
  std::string str_;
};

/// @brief Mockup function.
void fun(Spam& spam)
{
  std::cout << "fun() -> ";
  spam.action();
}

BOOST_PYTHON_MODULE(_example)
{
  namespace python = boost::python;

  python::class_<Spam>("Spam", python::init<std::string>());
  python::def("fun", &fun);
}

-----


from _example import *

def _patch_fun():
    _fun = fun
    def patch(spam, *args, **kwargs):
        if isinstance(spam, str):
            spam = Spam(spam)
        return _fun(spam, *args, **kwargs)
    return patch

fun = _patch_fun()
