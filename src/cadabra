#!/usr/bin/python

import sys
from code import InteractiveConsole
import re
import readline
import rlcompleter
from pcadabra import *

sys.path.insert(0, '/home/kasper/Development/git.others/sympy')
import sympy

# FIXME: generate this list dynamically
cdb_commands={"distribute", "keep_terms"}

class FileCacher:
    "Cache the stdout text so we can analyze it before returning it"
    def __init__(self): self.reset()
    def reset(self): self.out = []
    def write(self,line): self.out.append(line)
    def flush(self):
#        output = '\n'.join(self.out)
        output=self.out
        self.reset()
        return output


class Shell(InteractiveConsole):
    "Wrapper around Python that can filter input/output to the shell"
    def __init__(self):
        self.stdout = sys.stdout
        self.cache = FileCacher()
#        readline.set_completer(rlcompleter.Completer(vars).complete)
        InteractiveConsole.__init__(self)
        return

    # If the object to be displayed is an Ex (add Property), print it
    # using the human-readable str (FIXME: add other printers). If not,
    # pass it on to the previously existing display hook.
    def _displayhook(self, arg):
        if isinstance(arg, Ex):
            print(str(arg))
        elif isinstance(arg, Property):
            print(str(arg))
        else:
            self.remember_display_hook(arg)

            
    # Setup hooks for pretty printing.
    def set_display(self):
        self.remember_display_hook = sys.displayhook
        sys.displayhook = self._displayhook

    def unset_display(self):
        sys.displayhook = self.remember_display_hook


    def get_output(self): sys.stdout = self.cache
    def return_output(self): sys.stdout = self.stdout

    def push(self,line):

        # Detect Cadabra expression statements and rewrite to Python
        # form. The logic is that any expression ending on ';' or '.' is not
        # going to be a valid/recommended Python expression, so we turn it
        # into a declaration of an Ex object or property.
        # Detect Cadabra property declarations and rewrite to Python form.
        # todo: make ';' at the end result in an additional print (and
        # make the print statement print property objects using their
        # readable form; addresses one issue report).

        line_stripped=line.rstrip().lstrip()
        lastchar = line_stripped[-1:]
        if lastchar=='.' or lastchar==';':
            line_stripped=line_stripped[:-1]
        found = line_stripped.find(':=')
        if found>0:
            rewrite = line_stripped[:found] + " = Ex('" + line_stripped[found+2:]+"')"
            objname=line_stripped[:found]
            if lastchar!='.':
                rewrite = rewrite + "; print " + objname
            line=rewrite
        else:
            # Is it a property declaration?
            found = line_stripped.find('::')
            if found>0:
                match = re.search('([a-zA-Z]*)(.*)', line_stripped[found+2:])
                if match:
                    if len(match.group(2))>0: # declaration with arguments
                        rewrite = "__cdbtmp__ = "+match.group(1)+"(Ex('"+line_stripped[:found]+"'), "+match.group(2)[1:-1]+")"
                    else:
                        rewrite = "__cdbtmp__ = "+line_stripped[found+2:]+"(Ex('"+line_stripped[:found]+"'))"
                    objname="__cdbtmp__"
                    if lastchar!='.':
                        rewrite = rewrite + "; print " + objname
                    line=rewrite
                else:
                    print "inconsistent" # property names can only contain letters
#            else:
# COULD STILL SEE IF there is unexpected indent, and use that as a cadabra signal.
                # Now we dispatch based on whether the first name is defined as a cdb function
#                 match = re.search('([a-zA-Z\_]*).*', line_stripped)
#                 if match:
#                     cmd = match.group(1)
#                     if (cmd in cdb_commands) == False:
#                         # The input does not start with a cdb function, so let's assume this is an expression
#                         rewrite = "__cdbtmp__= Ex('"+line_stripped+"')"
#                         if lastchar==';':
#                             rewrite = rewrite + "; print __cdbtmp__"
#                         line=rewrite
#                     else:
#                         line=line.replace('%','__cdbtmp__')
#                         print line
#                 else:
#                     print "weird input"

#        print line
        # Now feed the pre-parsed input to Python.

        self.get_output()
        ret=InteractiveConsole.push(self,line)
        self.return_output()
        output = self.cache.flush()
        # you can filter the output here by doing something like
        # output = filter(output)
        if len(output)>0:
            print output[0] # or do something else with it
        return ret

if __name__ == '__main__':
    sh = Shell()
    sys.ps1='> '
    sys.ps2='. '
    sh.runsource("from pcadabra import *; import sys; sys.path.insert(0,'/home/kasper/Development/git.others/sympy'); from sympy import *")
    sh.set_display()
    sh.interact(banner='Cadabra 2.0\nCopyright (C) 2001-2014  Kasper Peeters <kasper.peeters@phi-sci.com>\nInfo at http://cadabra.phi-sci.com/\nAvailable under the terms of the GNU General Public License v3\nUsing sympy version '+sympy.__version__+"\n")
