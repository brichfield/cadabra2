#!/usr/bin/python

# Produce hyperlinked web documentation with maths using mathjax,
# from LaTeX documentation sections.
# Currently handles conversion of
#
#  \cdbalgorithm{name}{args}  : for the section title
#  \cdbseealgo{name}          : 'see also' hyperlink to algorithm
#  \subscommand{name}         : inline hyperlink to another algorithm

import re
import sys

segment = sys.argv[1]

f = open(segment, "r")

class ProcessAlgo: 
    
    def __init__(self):
        self.title=""
        self.related_algos=[]
        self.related_props=[]
        self.body=[]
        self.main=""
        
    def tex2html(self, str):
        str=str.replace('\\_', '_')
        str=str.replace('~', '&nbsp;')
        p = re.compile('.subscommand{ ( [^}]* ) }', re.VERBOSE)
        str=p.sub('<a href="../algorithms/\g<1>">\g<1></a>', str)
        p = re.compile('.subsprop{ ( [^}]* ) }', re.VERBOSE)
        str=p.sub('<a href="../properties/\g<1>">\g<1></a>', str)
        p = re.compile('.begin{screen}.*')
        str=p.sub('</p><script type="syntaxhighlighter" class="brush: cpp"><![CDATA[',str)
        p = re.compile('.end{screen}.*')
        str=p.sub(']]></script><p>',str)
        return str

    def parse(self, filename):
        f = open(filename, "r")
        while(f):
            line = f.readline()
            if line=="":
                break;
            match = re.match(r'\\cdbalgorithm\{([^\}]*)\}\{([^\}]*)\}', line)
            if match:
                self.title=self.tex2html(match.group(1))
            else:
                match = re.match(r'\\cdbseealgo\{([^\}]*)\}', line)
                if match:
                    self.related_algos.append( self.tex2html(match.group(1)) )
                else:
                    match = re.match(r'\\cdbseeprop\{([^\}]*)\}', line)
                    if match:
                        self.related_props.append( self.tex2html(match.group(1)) )
                    else:
                        # print self.tex2html(line)
                        self.main += self.tex2html(line)

    def output_html(self):
        print("<html>")
        print("   <head><style>h1 { font-family: fixed; }</style></head>")
        print("   <body>")
        print("   <h1>"+self.title+"</h1>")
        print("   <p>"+self.main+"</p>")
        print("   <ul>")
        for also in self.related_algos:
            print "      <li>"+also+"</li>"
        print("   </ul>")
        print("   <ul>")
        for also in self.related_props:
            print "      <li>"+also+"</li>"
        print("   </ul>")
        print("   </body>");
        print("</html>");


algo = ProcessAlgo()

algo.parse(sys.argv[1])

algo.output_html();


